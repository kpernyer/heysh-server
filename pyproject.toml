[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "heysh-server"
version = "2.0.0"
description = "Hey.sh Server - Python backend for knowledge management platform"
authors = [
    {name = "Hey.sh Team", email = "team@hey.sh"},
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.11"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "temporalio>=1.5.0",
    "supabase>=2.0.0",
    "psycopg2-binary>=2.9.0",
    "redis>=5.0.0",
    "weaviate-client>=3.25.0",
    "neo4j>=5.15.0",
    "openai>=1.0.0",
    "python-slugify>=8.0.0",
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "structlog>=23.2.0",
    "python-dotenv>=1.0.0",
    "pyyaml>=6.0.0",
    "jsonschema>=4.20.0",
    "strawberry-graphql[fastapi]>=0.215.0",
    "python-jose[cryptography]>=3.3.0",
    "email-validator>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "mypy>=1.7.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
    "just>=0.8.0",
    "uv>=0.1.0",
    "prometheus-client>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/heysh/heysh-server"
Repository = "https://github.com/heysh/heysh-server"
Documentation = "https://docs.hey.sh"
Issues = "https://github.com/heysh/heysh-server/issues"

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
target-version = "py311"
line-length = 100
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "supabase.*",
    "weaviate.*",
    "neo4j.*",
    "temporalio.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["test"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "httpx>=0.28.1",
    "pytest>=8.4.2",
    "pytest-asyncio>=1.2.0",
    "requests>=2.32.5",
]
